// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Item {
    id          String      @id @default(cuid())
    name        String      @unique
    price       Int
    orders      OrderItem[]
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
}

model Order {
    id                 String         @id @default(cuid())
    buyer              Person         @relation("BuyerOrders", fields: [buyerId], references: [id])
    buyerId            String
    recipient          Person         @relation("RecipientOrders", fields: [recipientId], references: [id])
    recipientId        String
    orderDate          DateTime
    deliveryDate       DateTime
    totalPurchase      Int
    deliveryMethod     DeliveryMethod @relation(fields: [deliveryMethodId], references: [id])
    deliveryMethodId   String
    shippingCost       Int
    grandTotal         Int
    payment            PaymentMethod  @relation(fields: [paymentMethodId], references: [id])
    paymentMethodId    String
    items              OrderItem[]
    status             OrderStatus    @relation(fields: [statusId], references: [id])
    statusId           String
    note               String?
    createdAt          DateTime       @default(now())
    updatedAt          DateTime       @updatedAt

    @@index([buyerId], map: "idx_buyerId")
    @@index([recipientId], map: "idx_recipientId")
    @@index([orderDate], map: "idx_orderDate")
}

model OrderItem {
    quantity   Int
    order      Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
    orderId    String
    item       Item   @relation(fields: [itemId], references: [id])
    itemId     String

    @@id([orderId, itemId])
    @@index([itemId], map: "idx_itemId")
}

model Person {
    id               String   @id @default(cuid())
    name             String
    address          String
    phoneNumber      String
    buyerOrders      Order[]  @relation("BuyerOrders")
    recipientOrders  Order[]  @relation("RecipientOrders")
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt

    @@index([name], map: "idx_name")
    @@index([phoneNumber], map: "idx_phoneNumber")
}

model PaymentMethod {
    id          String   @id @default(cuid())
    name        String   @unique
    orders      Order[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model DeliveryMethod {
    id          String   @id @default(cuid())
    name        String   @unique
    orders      Order[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model OrderStatus {
    id          String   @id @default(cuid())
    name        String   @unique
    orders      Order[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}
